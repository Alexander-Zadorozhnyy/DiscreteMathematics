from itertools import product, combinations_with_replacement as comb
from functools import lru_cache


@lru_cache(None)
def C(n, k):
    return 1 if (k == 0 or k == n) else C(n - 1, k - 1) + C(n - 1, k)


# У божьих коровок может быть четное число пятен на спине в количестве
# от 2 до 22. Будем считать, что вероятность любого числа пятен одинакова
# при случайном выборе особи. Какова вероятность того, что
# • при выборе двух особей, суммарное число пятен равняется 30;
# • при выборе двух особей, суммарное число пятен не превышает 38;
# • при выборе трех особей, суммарное число пятен превышает 44;
# • при выборе 12 особей, не менее чем у трех особей будет ровно по два пятна;
# • при выборе двух пар особей, суммарное число пятен в первой паре совпадает с суммарным числом пятен во второй.

count_suitable_combinations = 0
variable_cows = [x for x in range(2, 23, 2)] # Запишем в список возможное количество пятен на спинах у божьих коровок
for x in product(variable_cows, repeat=2): # Переберем все возможные комбинации двух божьих коровок
    if sum(x) == 30: # рассмотрим равна ли сумма их пятен 30:
        count_suitable_combinations += 1
        
#Будем считать, что особей вытягивают последовательно, тогда
# т.к вероятность вытащить n-ое количество пятен одинакова и события не зависимы
# Вероятность этого события можно найти путем кол-во подходящих исходов / кол-во всех возм.исходов
print("a) - " + str(count_suitable_combinations / len(variable_cows) ** 2))
# Аналогичным путем получаем вероятности пунктов b и c.
print("b) - " + str(len([1 for x in product(variable_cows, repeat=2) if sum(x) <= 38]) / len(variable_cows) ** 2))
print("c) - " + str(len([1 for x in product(variable_cows, repeat=3) if sum(x) > 44]) / len(variable_cows) ** 3))

# Найдем обратную вероятность - т.е p_(из 12 особей меньше чем у 3-ех будет два пятна)
# Тогда рассмотрим случай с 2 коровками по 2 пятна:
# Берем любые 10 штук, кроме тех, у кого 2 пятна и 2 по 2 пятна, но их можно выбрать в разном порядке, т.е домножить на C(12, 10)
# Его вероятность:
p_2dot_2 = C(12, 10) * 10 ** 10 / 11 ** 12
# Рассмотрим случай с 1 коровкой по 2 пятна:
# Берем любые 11 штук, кроме тех, у кого 2 пятна и 1 по 2 пятна, но их можно выбрать в разном порядке, т.е домножить на C(12, 11)
# Его вероятность:
p_2dot_1 = C(12, 11) * 10 ** 11 / 11 ** 12
# Случай с 0 б.коровками, очевиден.
p_2dot_0 = 10 ** 12 / 11 ** 12
print("d) - " + str(1 - p_2dot_2 - p_2dot_1 - p_2dot_0))
# Рассмотрим все возможные пары по 2 элемента и найдем те, у которых сумма пятен равна, и т.к мы количество всех
# исходов одной пары равно 11 ** 2, тогда после перебора 2 пар по 2 эл. количество всех исходов возрастает в квадрате.
# Вероятность этого события можно найти путем кол-во подходящих исходов / кол-во всех возм.исходов
print("e) - " + str(len([1 for x in product(variable_cows, repeat=2) for y in product(variable_cows, repeat=2) if sum(x)
                         == sum(y)]) / ((11 * 11) ** 2)))


