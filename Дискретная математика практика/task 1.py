from functools import lru_cache


@lru_cache(None)
def C(n, k):
    return 1 if (k == 0 or k == n) else C(n - 1, k - 1) + C(n - 1, k)


# 1. В лаборатории есть 22 белые мыши и 60 домовых мышей. Для исследо-
# вания нужно использовать от 5 до 13 белых и от 8 до 20 домовых. Кроме
# того, нужно выбрать контрольную группу той же численности и размера.
# Сколькими различными способами можно выбрать группу мышей для экс-
# перимента, при условии того, что мышей мы считаем одинаковыми? Для
# любопытных, описание эксперимента можно найти по ссылке в задаче 7.
# 1’. А если мы умеем различать мышей?


# 1) Т.к нужно выбрать группу белых мышей для исследований + контрольную группу(того же размера) =>
# кол-во эл. в одной группе [5, 11]. А т.к мы не можем их отличать => группы отличаются только размером
white_combination = 11 - 5 + 1
# Аналогично, для домовых , но т.к домовых мышей достаточное количество (20*2 < 60)
dom_combination = 20 - 8 + 1
# Тогда всего количество способов их выбрать:
print(white_combination * dom_combination)

# 1') Проделываем те же рассуждения, как и для первого пункта, только теперь группы могут отличаться не только кол-вом,
# но и отдельными экземплярами. Тогда нужно рассмотреть все комбинации для каждого кол-ва => т.к нам не важен порядок
# в котором их выбирают - используем формулу кол-ва сочетаний С(n, i) для исследовательской группы,
# и C(n - i, i) для контрольной группы, после чего просуммируем для каждого отдельного вида
sum_w = sum([C(22, i) * C(22 - i, i) for i in range(5, 12)])
sum_dom = sum([C(60, i) * C(60 - i, i) for i in range(8, 21)])
# После чего аналогично 1) перемножим все возможные способы выбрать определенную группу.
print(sum_w * sum_dom)  # 5321498994111069334368997826453402400

